#! /bin/bash
set -x
set -e
set -u

# Path Hacks for Solaris 10
case "${OSTYPE}" in
  solaris*)
    PATH=/opt/csw/bin:/usr/sfw/bin:$PATH
    TAR=gtar
    ;;
  *)
    TAR=tar
    ;;
esac

# Figure out if we have wget or curl
if which wget >/dev/null; then
  http_get="wget --output-document=- --quiet"
elif which curl >/dev/null; then
  http_get="curl -o -"
else
  echo "Error: could not find wget or curl on the remote system."
  echo "To install Puppet Enterprise using HTTP, wget or curl are required"
  exit 1
fi

# The installer action determines a temporary directory internally
# This is not a user defined option.  You may assume this will be
# a unique string of characters.
tmpdir='<%= options[:tmp_dir] %>'
cd "${tmpdir}"

# This is an option provided by the face install action.
# If it is not provided, this environment variable will be
# zero length, suitable for testing with -n and -z
PUPPETAGENT_CERTNAME='<%= options[:puppetagent_certname] %>'

# If the puppet agent certname has been given on the command line using
# --puppetagent-certname=foobar then the environment variable above will be
# nonzero length.  We should replace it in the answers file.
# (Note, the answers file has been uploaded by the face action)
# Finally, actually install Puppet Enterprise
if [[ -n "${PUPPETAGENT_CERTNAME}" ]]; then
  # Let's play shuffle the files.
  mv puppet.answers puppet.answers.orig
  # Give me everything _except_ any agent certname specified in the answers file
  grep -v '^q_puppetagent_certname' puppet.answers.orig > puppet.answers
  # Append the user specified option from the command line arguments.
  echo 'q_puppetagent_certname=<%= options[:puppetagent_certname] %>' >> puppet.answers
fi

echo "Installation script has started..."
echo "Downloading from: <%= options[:installer_payload] %>"

# Create a new directory to decompress the Puppet Enterprise installer
# into.  This provides us with consistent pathing regardless of the PE
# version.
install_dir="puppet-enterprise"
if [[ ! -e "${install_dir}" ]]; then
  mkdir "${install_dir}"
fi

# We assume the payload is a tar.gz file because the option handler
# enforces this.
# To save disk space (I'm concerned about /tmp filling) decompress on the fly.
echo "Uncompressing the payload ..."
echo "Executing: ${http_get} '<%= options[:installer_payload] %>' | ${TAR} -xvzf - --strip-components 1 -C ${install_dir}"
$http_get '<%= options[:installer_payload] %>' | \
  ${TAR} -xvzf - --strip-components 1 -C "${install_dir}"
echo "Uncompressing the payload ... Done."

# Finally, actually install Puppet Enterprise
"${install_dir}"/puppet-enterprise-installer -a puppet.answers 2>&1 | tee install.log

# If we get here then we should clean up the installation directory because it's big...
rm -rf "#{install_dir}"

# And then kick off a puppet agent run
/opt/puppet/bin/puppet agent --daemonize \
  --onetime \
  --ignorecache \
  --no-usecacheonfailure \
  --detailed-exitcodes \
  --no-splay

# This is just here to make sure the agent has some time to submit the
# certificate signing request to the master.
sleep 2

# And...  Done!
exit 0

# vim:ft=sh
